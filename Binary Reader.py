# Codecademy Computer Architecture Portfolio Project
# by MozzarellaMonster
from ALU import alu
from Registers import registers

# OPCODES and FUNCTION CODES are loosely based on MIPS R-type
#  _____________________
# |       OPCODES       |
# | 000000 - ARITHMETIC |
# | 000011 ------ OTHER |
# |_____________________|

#  _____________________
# |    FUNCTION CODES   |
# | 000001 -------- ADD | 
# | 000010 --- SUBTRACT |
# | 000011 --- MULTIPLY |
# | 000100 ----- DIVIDE |
# | 000101 ------- LOAD |
# | 000110 ------ STORE |
# |_____________________|

class binary_reader:
    def __init__(self):
        self.opcode = ""
        self.num1_reg = ""
        self.num2_reg = ""
        self.destination_reg = ""
        self.bit_shift = ""
        self.func = ""
        self.alu = alu()
        self.register = registers()
        

    def read(self, seq):
        if len(seq) != 32:
            print("Invalid input, not 32-bit length.\n")
            return
        elif set(c for c in seq) != {'0', '1'}:
            print("Invalid input, not binary.\n")
            return
        else:
            self.opcode = seq[:6]
            self.num1_reg = seq[6:11]
            self.num2_reg = seq[11:16]
            self.destination_reg = seq[16:21]
            self.bit_shift = seq[21:26]
            self.func = seq[26:]

        # Arithmetic operations
        if self.opcode == "000000":
            if self.func == "000001":
                result = self.alu.add(self.register.load(self.num1_reg), self.register.load(self.num2_reg))
                self.register.store(f'{result:05b}', self.destination_reg)
                print(result, "\n")
            elif self.func == "000010":
                result = self.alu.subtract(self.register.load(self.num1_reg), self.register.load(self.num2_reg))
                self.register.store(f'{result:05b}', self.destination_reg)
                print(result, "\n")
            elif self.func == "000011":
                result = self.alu.multiply(self.register.load(self.num1_reg), self.register.load(self.num2_reg))
                self.register.store(f'{result:05b}', self.destination_reg)
                print(result, "\n")
            elif self.func == "000100":
                result = self.alu.divide(self.register.load(self.num1_reg), self.register.load(self.num2_reg))
                self.register.store(f'{result:05b}', self.destination_reg)
                print(result, "\n")
            else:
                print("Invalid input, unrecognized function code.\n")
                return
        # Load and store operations
        elif self.opcode == "000011":
            if self.func == "000101":
                return self.register.load(self.destination_reg)
            elif self.func == "000110":
                if self.destination_reg == "00000":
                    self.register.store_oldest(self.num1_reg)
                else:
                    self.register.store(self.num1_reg, self.destination_reg)
            else:
                print("Invalid input, unrecognized function code.\n")
                return
        else:
            print("Invalid input, unrecognized operation code.\n")
            return

bin_reader = binary_reader()
bin_reader.read("00001100101000000000100000000110")
bin_reader.read("00001100011000000001000000000110")
bin_reader.read("00000000001000010010000000000011")
bin_reader.read("00000000001000100010100000000011")
bin_reader.read("00000000100000010011000000000100")
bin_reader.read("00000000001000100001100000000001")
bin_reader.read("00000000101000110011100000000010")

bin_reader.read("28190839402905290432984920384290")
bin_reader.read("00101010101111110010110111110102")
bin_reader.read("                                ")
bin_reader.read("fjdsklfjodskjfioofioewjdfoijiods")
bin_reader.read("10110000110011110100110101000111100100")

bin_reader.read("00001110111011000110100000000110")
bin_reader.read("00001110111110110000000000000101")
bin_reader.read("00001111111101100001000000000110")
bin_reader.read("00001100111101001011100000000110")
bin_reader.read("00001110011100011101000000000101")
bin_reader.read("00001111000100010001100000000101")
bin_reader.read("00001101100010100110000000000101")
bin_reader.read("00001111101011000111000000000110")
bin_reader.read("00001101111110111100000000000110")
bin_reader.read("00001100111000110111100000000110")
bin_reader.read("00001110100000110101100000000101")
bin_reader.read("00001101100010110011000000000110")
bin_reader.read("00001100001110010001000000000101")
bin_reader.read("00001100100001101000100000000110")
bin_reader.read("00001110100000100000100000000101")
bin_reader.read("00001101100001000010000000000101")
bin_reader.read("00001110110000111010100000000101")
bin_reader.read("00001110011001011011000000000110")
bin_reader.read("00001100000111110011100000000101")
bin_reader.read("00001111011000100101100000000110")
bin_reader.read("00001110111001010111100000000110")
bin_reader.read("00001110101100001011100000000101")
bin_reader.read("00001100010110011101000000000110")
bin_reader.read("00001110000011001010100000000101")
bin_reader.read("00001101110001111001000000000110")
bin_reader.read("00001101100101011000100000000101")
bin_reader.read("00001101000010111101000000000101")
bin_reader.read("00001100101001011000000000000101")
bin_reader.read("00001110011101001000100000000110")
bin_reader.read("00001111000011101110000000000110")
bin_reader.read("00001111001101111011000000000110")
bin_reader.read("00001110110001010100100000000110")
bin_reader.read("00001100010101000100100000000101")
bin_reader.read("00001110000111010110000000000110")
bin_reader.read("00001110111000001010000000000101")
bin_reader.read("00001101010101110011100000000110")
bin_reader.read("00001100001010110110100000000110")
bin_reader.read("00001111100011110010100000000110")
bin_reader.read("00001111011110000100100000000110")
bin_reader.read("00001110101110101111100000000110")
bin_reader.read("00001111001000100010100000000101")
bin_reader.read("00001100100111111001100000000110")
bin_reader.read("00001110111100011101100000000101")
bin_reader.read("00001100100000111110100000000110")
bin_reader.read("00001111100010011010100000000110")
bin_reader.read("00001101001010100101100000000101")
bin_reader.read("00001100011000001001100000000101")
bin_reader.read("00001100010111111110000000000101")
bin_reader.read("00001111001000111100000000000110")
bin_reader.read("00001110101011110000000000000101")
bin_reader.read("00001110000101101010100000000110")
bin_reader.read("00001100011001000100000000000110")
bin_reader.read("00001111000100110110000000000101")
bin_reader.read("00001111101101000110000000000110")
bin_reader.read("00001101001010111110100000000110")
bin_reader.read("00001111010011100000100000000101")
bin_reader.read("00001110011110010001000000000101")
bin_reader.read("00001101011100000000100000000101")
bin_reader.read("00001100110111110011000000000110")
bin_reader.read("00001100101001100101000000000101")
bin_reader.read("00001100111100010111100000000101")
bin_reader.read("00001111111101101100000000000110")
bin_reader.read("00001111111111101000100000000101")
bin_reader.read("00001100101011011101000000000110")
bin_reader.read("00001110110001101110100000000101")
bin_reader.read("00001101110100101110000000000101")
bin_reader.read("00001100101100110111000000000110")
bin_reader.read("00001101001001100111100000000101")
bin_reader.read("00001110001001111101100000000101")
bin_reader.read("00001100100011100100100000000110")
bin_reader.read("00001110000000001100000000000110")
bin_reader.read("00001100110000110001100000000101")
bin_reader.read("00001110111111011111100000000110")
bin_reader.read("00001100001010100011000000000110")
bin_reader.read("00001110000101111011000000000101")
bin_reader.read("00001101011000111100100000000110")
bin_reader.read("00001100110110111110100000000110")
bin_reader.read("00001100011000101000100000000101")
bin_reader.read("00001100010010000000100000000110")
bin_reader.read("00001100010101001011100000000110")
bin_reader.read("00001110001010000011000000000110")
bin_reader.read("00001110101100011111100000000101")
bin_reader.read("00001100001110011100000000000101")
bin_reader.read("00001111111011011010100000000101")
bin_reader.read("00001100111110000101100000000101")
bin_reader.read("00001100010011000001100000000110")
bin_reader.read("00001111101111011011000000000101")
bin_reader.read("00001100110011010100000000000110")
bin_reader.read("00001100010100100111000000000101")
bin_reader.read("00001111101100110010000000000101")
bin_reader.read("00001101000011011010000000000101")
bin_reader.read("00001100011010010111100000000101")
bin_reader.read("00001111000000010001000000000110")
bin_reader.read("00001110100111111000000000000110")
bin_reader.read("00001110000010100110100000000101")
bin_reader.read("00001100001011111001100000000110")
bin_reader.read("00001101100011101011000000000101")
bin_reader.read("00001100001101100000000000000110") # <--
bin_reader.read("00001100111010011001100000000101")
bin_reader.read("00001100000000011101000000000101")
bin_reader.read("00001101011100001011100000000101")
bin_reader.read("00001100110100011110000000000110")
bin_reader.read("00001110110010111010000000000101")
bin_reader.read("00001110101110110111100000000101")
bin_reader.read("00001110111001100000000000000101")
bin_reader.read("00001100100100010001100000000101")
bin_reader.read("00001101010000011001100000000110")
bin_reader.read("00001100010010100000000000000110") # <--
bin_reader.read("00001100111111000001000000000101")
bin_reader.read("00001101110111111100100000000101")
bin_reader.read("00001110000100010010000000000101")
bin_reader.read("00001111110010000110100000000101")
bin_reader.read("00001110001001001011000000000110")
bin_reader.read("00001111011101111111000000000110")
bin_reader.read("00001111011001101110100000000101")
bin_reader.read("00001111100011011001100000000110")
bin_reader.read("00001101010101110000000000000101")
bin_reader.read("00001110000110110010100000000110")
bin_reader.read("00001101000010000101000000000101")
bin_reader.read("00001100010001110110000000000101")
print()
bin_reader.read("00000010100001110101100000000001")
bin_reader.read("00000010001111100001100000000100")
bin_reader.read("00000000011010001000100000000010")
bin_reader.read("00000001010111111010100000000010")
bin_reader.read("00001100100100011001000000000110")
bin_reader.read("00001101000000111111000000000101")
bin_reader.read("00000000001011100111100000000100")
bin_reader.read("00000011011101100110100000000001")
bin_reader.read("00001111100000110110000000000110")
bin_reader.read("00001100110010011000100000000110")
bin_reader.read("00001111101101010110000000000110")
bin_reader.read("00001100111000111011000000000110")
bin_reader.read("00001100100000001000000000000101")
bin_reader.read("00001101110101101001000000000110")
bin_reader.read("00000000001001000110000000000001")
bin_reader.read("00000001110000001111100000000011")
bin_reader.read("00001100101000000110000000000110")
bin_reader.read("00001110100111100101000000000101")
bin_reader.read("00001110101100000000000000000110")
bin_reader.read("00001110011100100010100000000110")
bin_reader.read("00001101000011011100100000000110")
bin_reader.read("00001101110001000000100000000110")
bin_reader.read("00001110000100010011100000000101")
bin_reader.read("00001100010010100010100000000110")
bin_reader.read("00000000011111001111100000000011")
bin_reader.read("00001110110100101110100000000101")
bin_reader.read("00000000111101100101000000000001")
bin_reader.read("00000000101100100010000000000011")
bin_reader.read("00000000100000111010100000000001")
bin_reader.read("00000010110011000111100000000011")
bin_reader.read("00001110010001011000100000000110")
bin_reader.read("00000010011000001110100000000100")
bin_reader.read("00000010000011111011000000000010")
bin_reader.read("00001111100100101000100000000101")
bin_reader.read("00000011111000100000100000000100")
bin_reader.read("00000011000111010000100000000001")
bin_reader.read("00000001101110000010100000000010")
bin_reader.read("00001111100100011010100000000101")
bin_reader.read("00000001110111111110100000000011")
bin_reader.read("00000000111011101101000000000100")
bin_reader.read("00000011000111010111000000000001")
bin_reader.read("00001111100001001101000000000110")
bin_reader.read("00000011011110110101000000000100")
bin_reader.read("00001100101011010111100000000110")
bin_reader.read("00001101000110000110000000000110")
bin_reader.read("00001100000010001110100000000110")
bin_reader.read("00000001100111111111100000000100")
bin_reader.read("00001110010100011100000000000101")
bin_reader.read("00000001101000000110100000000001")
bin_reader.read("00001111001010011101000000000110")
bin_reader.read("00000001001000100111100000000011")
bin_reader.read("00001101001110110000000000000101")
bin_reader.read("00000001000101011100000000000011")
bin_reader.read("00001110010011100011000000000101")
bin_reader.read("00000010000101110100000000000100")
bin_reader.read("00001110110110110011000000000101")
bin_reader.read("00001100110111011100000000000110")
bin_reader.read("00001110011101011111000000000101")
bin_reader.read("00000000010010100110100000000011")
bin_reader.read("00001110001100010100000000000110")
bin_reader.read("00000011000000100000000000000011")
bin_reader.read("00001110010010000010100000000101")
bin_reader.read("00001111010000110111000000000101")
bin_reader.read("00001100101111100101100000000101")
bin_reader.read("00001111101000000011100000000110")
bin_reader.read("00000011000110011100100000000010")
bin_reader.read("00000001000011010110100000000010")
bin_reader.read("00000010101100000111100000000001")
bin_reader.read("00001100000100111100100000000101")
bin_reader.read("00000011001110000001000000000001")
bin_reader.read("00001111001010110111100000000110")
bin_reader.read("00001110001000011111100000000110")
bin_reader.read("00001101011110100011000000000110")
bin_reader.read("00000010101110010100100000000001")
bin_reader.read("00001111011000000001000000000101")